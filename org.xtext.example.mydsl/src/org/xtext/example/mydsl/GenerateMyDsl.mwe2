module org.xtext.example.mydsl.GenerateMyDsl

import org.eclipse.xtext.xtext.generator.*
import org.eclipse.xtext.xtext.generator.model.project.*

var rootPath = ".."
var projectName = "org.xtext.example.mydsl"
var runtimeProject = "${rootPath}/${projectName}"
Workflow {
	
	bean = org.eclipse.emf.mwe.utils.StandaloneSetup {
		scanClassPath = true
		platformUri = "${runtimeProject}/.."
	}
		
	component = org.eclipse.emf.mwe.utils.DirectoryCleaner {
		directory = "${runtimeProject}/emf-gen"
	}

	component = org.eclipse.emf.mwe.utils.DirectoryCleaner {
		directory = "${runtimeProject}.ui/emf-gen"
	}
	
	component =  org.eclipse.emf.mwe2.ecore.EcoreGenerator {
		genModel = "platform:/resource/${projectName}/model/MyDsl.genmodel"
		srcPath = "platform:/resource/${projectName}/src"
	}
	
	component = org.eclipse.emf.mwe.utils.DirectoryCleaner {
		directory = "${runtimeProject}/src-gen"
	}

	component = org.eclipse.emf.mwe.utils.DirectoryCleaner {
		directory = "${runtimeProject}.ui/src-gen"
	}
	component = XtextGenerator {
		configuration = {
			project = StandardProjectConfig {
				baseName = "org.xtext.example.mydsl"
				rootPath = rootPath
				runtimeTest = {
					enabled = true
				}
				eclipsePlugin = {
					enabled = true
				}
				eclipsePluginTest = {
					enabled = true
				}
				createEclipseMetaData = true
			}
			code = {
				encoding = "windows-1252"
				lineDelimiter = "\r\n"
				fileHeader = "/*\n * generated by Xtext \${version}\n */"
			}
		}
		language = StandardLanguage {
			name = "org.xtext.example.mydsl.MyDsl"
			fileExtensions = "mydsl"

			referencedResource = "platform:/resource/${projectName}/model/MyDsl.genmodel"
			
			fragment = ecore2xtext.Ecore2XtextValueConverterServiceFragment2 auto-inject {}
			
			serializer = {
				generateStub = false
			}
			validator = {
				// composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
			}
		}
	}
}
